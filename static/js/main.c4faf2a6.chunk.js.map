{"version":3,"sources":["Components/GeneralComponents/CustomHeader.jsx","Components/GeneralComponents/CustomTitle.jsx","Components/DairyAppTitle/DairyAppTitle.jsx","Components/Tasks/Tasks.jsx","Components/CustomHooks/useLocalStorage.js","Components/GeneralComponents/NewTaskForm.jsx","Components/GeneralComponents/NewTaskInput.jsx","Components/GeneralComponents/SaveTaskBtn.jsx","Components/GeneralComponents/TaskItem.jsx","Components/GeneralComponents/NumberedDot.jsx","Components/GeneralComponents/DeleteBtn.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CustomHeader","index","content","Class","className","CustomTitle","children","DairyAppTitle","Tasks","useLocalStorage","getTasks","localStorage","getItem","JSON","parse","setItem","stringify","useState","tasks","setTasks","saveTask","item","newData","push","removeTask","uuid","filtred","filter","NewTasksForm","setData","onSubmit","e","preventDefault","taskData","task","target","taskName","value","description","descriptionCount","length","NewTaskInput","type","name","placeholder","SaveTaskBtn","TaskItem","NumberedDot","number","DeleteBtn","onClick","App","data","NewTaskForm","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4faf2a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CustomHeader = ({index, content, Class}) => (\r\n    <>\r\n        {index === 1 && <h1 className = {`CustomHeader ${Class}`}> {content} </h1>}\r\n        {index === 2 && <h2 className = {`CustomHeader ${Class}`}> {content} </h2>}\r\n        {index === 3 && <h3 className = {`CustomHeader ${Class}`}> {content} </h3>}\r\n        {index === 4 && <h4 className = {`CustomHeader ${Class}`}> {content} </h4>}\r\n        {index === 5 && <h5 className = {`CustomHeader ${Class}`}> {content} </h5>}\r\n    </>\r\n); \r\n\r\nexport default CustomHeader;","import React from 'react';\r\n\r\nconst CustomTitle = ({content, Class}) =>  \r\n    <p className = {`CustomTitle ${Class}`} children ={content} />;\r\n\r\nexport default CustomTitle;","import React from 'react';\r\n\r\n//components:\r\nimport CustomHeader from '../GeneralComponents/CustomHeader';\r\nimport CustomTitle from '../GeneralComponents/CustomTitle';\r\n\r\nconst DairyAppTitle = () => (\r\n    <section className = 'DairyAppTitle'> \r\n        <CustomHeader index = {1} content = 'DAIRY APP'/>\r\n        <CustomTitle content = 'Comment with no sense'/>\r\n    </section>\r\n);\r\n\r\nexport default DairyAppTitle;","import React from 'react';\r\n\r\nconst Tasks = ({children}) => {\r\n    return(\r\n        <section className = 'Tasks'>\r\n            {children}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Tasks;","import {useState} from 'react';\r\n\r\nconst useLocalStorage = () => {\r\n    const getTasks = () => {        \r\n        if (localStorage.getItem('tasks') !== null) {\r\n            return(JSON.parse(localStorage.getItem('tasks')));\r\n        }\r\n        else {\r\n            localStorage.setItem('tasks', JSON.stringify([]))\r\n            return([])\r\n        };\r\n    };\r\n\r\n    const saveTask = (item) => {\r\n        let newData = getTasks();\r\n        newData.push(item);        \r\n\r\n        localStorage.setItem('tasks', JSON.stringify(newData));\r\n        setTasks(newData);\r\n    };\r\n\r\n    const removeTask = (uuid) => {\r\n        const filtred = getTasks().filter( (item) => item.uuid !== uuid );\r\n\r\n        localStorage.setItem('tasks', JSON.stringify(filtred));\r\n        setTasks(filtred);\r\n    };    \r\n\r\n    const [tasks, setTasks] = useState(getTasks);\r\n\r\n    return {\r\n        tasks, \r\n        getTasks, \r\n        setTasks, \r\n        saveTask, \r\n        removeTask\r\n    };\r\n};\r\n\r\n// removeTask, reset, saveDescription, getDescriptionCount\r\n\r\nexport default useLocalStorage;","import React from 'react';\r\n\r\n//packages:\r\nimport * as uuid from 'uuid/v1';\r\n\r\n//custom hooks:\r\nimport useLocalStorage from '../CustomHooks/useLocalStorage';\r\n\r\nconst NewTasksForm = ({children, setData}) => {\r\n    const {saveTask, getTasks} = useLocalStorage();\r\n    \r\n    const HandleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let taskData = {\r\n            task: e.target.taskName.value,\r\n            description: false,\r\n            descriptionCount: 0,\r\n            uuid: uuid(),\r\n        };\r\n\r\n        if (e.target.taskName.value.length > 0){\r\n            saveTask(taskData);\r\n        }\r\n        \r\n        e.target.taskName.value = '';\r\n\r\n        setData(getTasks());\r\n    };\r\n\r\n    return(\r\n        <form \r\n            className = 'NewTasksForm' \r\n            onSubmit = { HandleSubmit }\r\n            children = {children}    \r\n        />\r\n    );\r\n};\r\n\r\nexport default NewTasksForm;","import React from 'react';\r\n\r\nconst NewTaskInput  = () => (\r\n    <input \r\n        type = 'text' \r\n        name = 'taskName'\r\n        className = 'NewTaskInput'\r\n        placeholder = 'Type name here...'    \r\n    />\r\n);\r\n\r\nexport default NewTaskInput;","import React from 'react';\r\n\r\nconst SaveTaskBtn = () => \r\n    <button\r\n        type = 'submit'\r\n        className = 'SaveTaskBtn'  \r\n        children = 'Add new'\r\n    />;\r\n\r\nexport default SaveTaskBtn;","import React from 'react';\r\n\r\nconst TaskItem = ({children}) => {\r\n    return(\r\n        <section className = {`TaskItem`}>\r\n            {children}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TaskItem;","import React from 'react';\r\n\r\nconst NumberedDot = ({number}) => (\r\n    <span \r\n        className = 'NumberedDot' \r\n        children = {number}    \r\n    />\r\n);\r\n\r\nexport default NumberedDot;\r\n\r\n","import React from 'react';\r\n\r\n//custom hook:\r\nimport useLocalStorage from '../CustomHooks/useLocalStorage';\r\n\r\nconst DeleteBtn = ({uuid, setData}) => {\r\n    const {removeTask, getTasks} = useLocalStorage();\r\n    \r\n    const ClickHandler = (number) => {\r\n        removeTask(number);\r\n        setData(getTasks());\r\n    };\r\n\r\n    return(\r\n        <button \r\n            type = 'button' \r\n            className = 'DeleteBtn'\r\n            onClick = {() => ClickHandler(uuid)}\r\n        >\r\n            Delete\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default DeleteBtn;","import React, {useState} from 'react';\r\n\r\n//styles:\r\nimport './Styles/MAIN.sass';\r\n\r\n//components:\r\nimport DairyAppTitle from './Components/DairyAppTitle/DairyAppTitle';\r\nimport Tasks from './Components/Tasks/Tasks';\r\nimport CustomHeader from './Components/GeneralComponents/CustomHeader'\r\nimport NewTaskForm from './Components/GeneralComponents/NewTaskForm';\r\nimport NewTaskInput from './Components/GeneralComponents/NewTaskInput';\r\nimport SaveTaskBtn from './Components/GeneralComponents/SaveTaskBtn';\r\nimport TaskItem from './Components/GeneralComponents/TaskItem';\r\nimport NumberedDot from './Components/GeneralComponents/NumberedDot';\r\nimport DeleteBtn from './Components/GeneralComponents/DeleteBtn'; \r\n\r\n//custom hooks:\r\nimport useLocalStorage from './Components/CustomHooks/useLocalStorage';\r\n\r\nconst App = () => {\r\n\tconst {tasks} = useLocalStorage();\r\n\tconst [data, setData] = useState(tasks);\r\n\r\n\treturn(\r\n\t\t<section className = 'App'>\r\n\t\t\t<DairyAppTitle />\r\n\t\r\n\t\t\t<Tasks >\r\n\t\t\t\t<CustomHeader \r\n\t\t\t\t\tindex = {2}\r\n\t\t\t\t\tcontent = 'Items' \r\n\t\t\t\t\tClass = 'TaskTitle'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<NewTaskForm setData = {setData}>\r\n\t\t\t\t\t<NewTaskInput />\r\n\t\t\t\t\t<SaveTaskBtn />\r\n\t\t\t\t</NewTaskForm>\r\n\r\n\t\t\t\t{data.map(\r\n\t\t\t\t\t(item) =>\r\n\t\t\t\t\t\t<TaskItem key = {item.uuid}>\t\t\r\n\t\t\t\t\t\t\t<section className = 'TaskName'>{item.task}</section>\r\n\r\n\t\t\t\t\t\t\t<NumberedDot number = {item.descriptionCount}/>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<DeleteBtn uuid = {item.uuid} setData = {setData}/>\r\n\t\t\t\t\t\t</TaskItem>\r\n\t\t\t\t)}\r\n\t\t\t</Tasks>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}