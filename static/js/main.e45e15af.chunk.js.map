{"version":3,"sources":["Components/GeneralComponents/CustomHeader.jsx","Components/GeneralComponents/CustomTitle.jsx","Components/DairyAppTitle/DairyAppTitle.jsx","Components/Tasks/Tasks.jsx","Components/CustomHooks/useLocalStorage.js","Components/GeneralComponents/NewTaskForm.jsx","Components/GeneralComponents/NewTaskInput.jsx","Components/GeneralComponents/SaveTaskBtn.jsx","Components/GeneralComponents/TaskItem.jsx","Components/GeneralComponents/NumberedDot.jsx","Components/GeneralComponents/DeleteBtn.jsx","Components/Comments/Comments.jsx","Components/GeneralComponents/CommentItem.jsx","Components/GeneralComponents/AvatarComponent.jsx","Components/GeneralComponents/AvatarPicker.jsx","Components/GeneralComponents/CommentsArea.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CustomHeader","index","content","Class","className","CustomTitle","children","DairyAppTitle","Tasks","useLocalStorage","getTasks","localStorage","getItem","JSON","parse","setItem","stringify","updateTask","item","uuid","updatedTasksList","allTasks","objIndex","findIndex","obj","setTasks","useState","tasks","saveTask","newData","push","removeTask","filtred","filter","getComments","comments","undefined","descriptions","addComment","data","selectedTask","descriptionCount","NewTasksForm","setData","onSubmit","e","preventDefault","taskData","task","target","taskName","value","length","NewTaskInput","type","name","placeholder","SaveTaskBtn","TaskItem","setComments","setSelectedUuid","selectedUuid","isActive","setIsActive","React","useEffect","onClick","setUpData","NumberedDot","number","DeleteBtn","Comments","SavadAvatar","avatar","style","backgroundColor","CommentItem","text","AvatarComponent","selectedAvatar","toShowPicker","setToShowPicker","AvatarPicker","setSelectedAvatar","map","key","CommentsArea","containerRef","useRef","isEventActive","checkCommet","useKeys","alert","when","ref","title","App","NewTaskForm","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e45e15af.chunk.js","sourcesContent":["import React from 'react';\n\nconst CustomHeader = ({index, content, Class}) => (\n    <>\n        {index === 1 && <h1 className = {`CustomHeader ${Class}`}> {content} </h1>}\n        {index === 2 && <h2 className = {`CustomHeader ${Class}`}> {content} </h2>}\n        {index === 3 && <h3 className = {`CustomHeader ${Class}`}> {content} </h3>}\n        {index === 4 && <h4 className = {`CustomHeader ${Class}`}> {content} </h4>}\n        {index === 5 && <h5 className = {`CustomHeader ${Class}`}> {content} </h5>}\n    </>\n); \n\nexport default CustomHeader;","import React from 'react';\n\nconst CustomTitle = ({content, Class}) =>  \n    <p className = {`CustomTitle ${Class}`} children ={content} />;\n\nexport default CustomTitle;","import React from 'react';\n\n//components:\nimport CustomHeader from '../GeneralComponents/CustomHeader';\nimport CustomTitle from '../GeneralComponents/CustomTitle';\n\nconst DairyAppTitle = () => (\n    <section className = 'DairyAppTitle'> \n        <CustomHeader index = {1} content = 'DAIRY APP'/>\n        <CustomTitle content = 'Comment with no sense'/>\n    </section>\n);\n\nexport default DairyAppTitle;","import React from 'react';\n\nconst Tasks = ({children}) => {\n    return(\n        <section className = 'Tasks'>\n            {children}\n        </section>\n    );\n};\n\nexport default Tasks;","import {useState} from 'react';\n\nconst useLocalStorage = () => {\n    // tasks\n    const getTasks = () => {        \n        if (localStorage.getItem('tasks') !== null) {\n            return(JSON.parse(localStorage.getItem('tasks')));\n        }\n        else {\n            localStorage.setItem('tasks', JSON.stringify([]))\n            return([])\n        };\n    };\n\n    const saveTask = (item) => {\n        let newData = getTasks();\n        newData.push(item);        \n\n        localStorage.setItem('tasks', JSON.stringify(newData));\n        setTasks(newData);\n    };\n\n    const SaveUpdatedTasks = (updatedTasksList) => {        \n        localStorage.setItem('tasks', JSON.stringify(updatedTasksList));\n        setTasks(updatedTasksList);\n    };\n\n    const removeTask = (uuid) => {\n        const filtred = getTasks().filter( (item) => item.uuid !== uuid );\n\n        localStorage.setItem('tasks', JSON.stringify(filtred));\n        setTasks(filtred);\n    };    \n\n    const updateTask = (item, uuid) => {\n        const allTasks = getTasks();\n        //Find index of specific object using findIndex method:    \n        const objIndex = allTasks.findIndex((obj => obj.uuid === uuid));\n        \n        //updating:\n        allTasks[objIndex] = item[0]; \n        SaveUpdatedTasks(allTasks);\n    };\n\n    const [tasks, setTasks] = useState(getTasks);\n\n    //comments:\n    const getComments = (uuid) => {\n        let comments = getTasks().filter( (item) => item.uuid === uuid );              \n        if(comments[0] !== undefined) {\n            return comments[0].descriptions;\n        };\n    };\n\n    const addComment = (uuid, data) => {\n        let selectedTask = getTasks().filter( (item) => item.uuid === uuid )\n        //getting comments for selected taks only:\n        selectedTask[0].descriptions.push(data);\n        \n        //counting descriptions:\n        selectedTask[0].descriptionCount++;\n\n        updateTask(selectedTask, uuid);\n    };\n\n    return {\n        tasks, getTasks, setTasks, saveTask, removeTask,\n        getComments, addComment\n    }\n};\n\nexport default useLocalStorage;","import React from 'react';\n\n//packages:\nimport * as uuid from 'uuid/v1';\n\n//custom hooks:\nimport useLocalStorage from '../CustomHooks/useLocalStorage';\n\nconst NewTasksForm = ({children, setData}) => {\n    const {saveTask, getTasks} = useLocalStorage();\n    \n    const HandleSubmit = (e) => {\n        e.preventDefault();\n\n        let taskData = {\n            task: e.target.taskName.value,\n            descriptions: [],\n            descriptionCount: 0,\n            uuid: uuid()\n        };\n\n        if (e.target.taskName.value.length > 0){\n            saveTask(taskData);\n        }\n\n        //for displaying changes:\n        setData(getTasks());\n\n        //cleaning the input after submit:\n        e.target.taskName.value = '';\n    };\n\n    return(\n        <form \n            className = 'NewTasksForm' \n            onSubmit = { HandleSubmit }\n            children = {children}    \n        />\n    );\n};\n\nexport default NewTasksForm;","import React from 'react';\n\nconst NewTaskInput  = () => (\n    <input \n        type = 'text' \n        name = 'taskName'\n        className = 'NewTaskInput'\n        placeholder = 'Type name here...'    \n    />\n);\n\nexport default NewTaskInput;","import React from 'react';\n\nconst SaveTaskBtn = () => \n    <button\n        type = 'submit'\n        className = 'SaveTaskBtn'  \n        children = 'Add new'\n    />;\n\nexport default SaveTaskBtn;","import React, {useState} from 'react';\n\n//custom hook:\nimport useLocalStorage from '../CustomHooks/useLocalStorage';\n\nconst TaskItem = ({children, uuid, setComments, setSelectedUuid, selectedUuid}) => {    \n    const {getComments} = useLocalStorage();\n    const [isActive, setIsActive] = useState(false)\n\n    React.useEffect(() => {\n        uuid === selectedUuid ? setIsActive(true) : setIsActive(false) \n    }, [selectedUuid, uuid])\n\n    const setUpData = (uuid)=> {\n        setSelectedUuid(uuid);\n        setComments(getComments(uuid));\n\n    };\n    \n    return(\n        <section \n            className = {`TaskItem ${isActive ? 'TaskActive' : ''}`} \n            onClick = {() =>  setUpData(uuid)}\n        >\n            {children}\n        </section>\n    );\n};\n\nexport default TaskItem;","import React from 'react';\n\nconst NumberedDot = ({number}) => (\n    <span \n        className = 'NumberedDot' \n        children = {number}    \n    />\n);\n\nexport default NumberedDot;\n\n","import React from 'react';\n\n//custom hook:\nimport useLocalStorage from '../CustomHooks/useLocalStorage';\n\nconst DeleteBtn = ({uuid, setData}) => {\n    const {removeTask, getTasks} = useLocalStorage();\n    \n    const ClickHandler = (number) => {\n        removeTask(number);\n        setData(getTasks());\n    };\n\n    return(\n        <button \n            type = 'button' \n            className = 'DeleteBtn'\n            onClick = {() => ClickHandler(uuid)}\n        >\n            Delete\n        </button>\n    );\n};\n\nexport default DeleteBtn;","import React from 'react';\n\nconst Comments = ({children}) => (\n    <section className = 'CommentsSection'>\n        {children}\n    </section> \n);\n\nexport default Comments;","import React from 'react';\n\nconst CommentItem = ({avatar, text}) => (\n    <section className = 'CommentItem'>\n        <SavadAvatar avatar = {avatar}/>\n        <section className = 'commentText'>\n            {text}\n        </section>\n    </section>\n);\n\nconst SavadAvatar = ({avatar}) => \n    <section \n        className = 'SavadAvatar'\n        style = {{backgroundColor: `${avatar}`}}\n    />\n\nexport default CommentItem;","import React from 'react';\n\nconst AvatarComponent = ({selectedAvatar, toShowPicker, setToShowPicker}) => {\n    return(\n        <button \n            style = {{backgroundColor: `${selectedAvatar}`}}\n            onClick = {() => setToShowPicker(!toShowPicker)}\n            className = 'AvatarComponent'\n        />\n    );\n};\n\nexport default AvatarComponent;","import React from 'react';\n\nconst AvatarPicker = ({setSelectedAvatar, toShowPicker, setToShowPicker}) => {\n    const colors = ['#2F80ED', '#F2994A', '#EB5757', '#56CCF2', '#F2C94C'];\n\n    const handleClick = (color) => {\n        setSelectedAvatar(color);\n        setToShowPicker(!toShowPicker);\n    };\n\n    return(\n        <section className = 'AvatarPickerSection'>\n        {\n            colors.map( item => \n                <section \n                    key = {item}\n                    onClick = {() => handleClick(item)}\n                    className = 'AvatarItem' \n                    style = {{backgroundColor: `${item}`}}\n                />\n            )\n        }\n        </section>\n    );\n}; \n\nexport default AvatarPicker;","import React, {useState, useRef} from 'react';\n\n//components:\nimport AvatarComponent from './AvatarComponent';\nimport AvatarPicker from './AvatarPicker';\n\n//custom hook:\nimport useLocalStorage from '../CustomHooks/useLocalStorage';\n\n//packge:\nimport useKeys from \"@rooks/use-keys\";\n\nconst CommentsArea = ({uuid, setComments, setData}) => {\n    const {addComment, getComments, getTasks} = useLocalStorage();\n    const containerRef = useRef();\n    const [isEventActive] = useState(true);\n\n    //for avatar picker:\n    const [toShowPicker, setToShowPicker] = useState(false);\n\tconst [selectedAvatar, setSelectedAvatar] = useState('');\n\n    const checkCommet = (data) => {\n        if(data.length > 0){\n            return {\n                text: data,\n                avatar: selectedAvatar.length > 0 ? selectedAvatar : '#2F80ED' \n            }\n        }\n        else return false;\n    };    \n\n    useKeys(    \n        [\"ControlLeft\", \"Enter\"],\n        (e) => {          \n            if(typeof(checkCommet(e.target.value)) === 'object'){\n                addComment(uuid, checkCommet(e.target.value))\n                //for displaying changes:        \n                setComments(getComments(uuid));\n                setData(getTasks());\n                //cleaning up text area:\n                e.target.value = '';\n            }else alert('Write some text!');    \n        },\n        {\n          target: containerRef,\n          when: isEventActive\n        }\n    );\n    \n    return(\n        <>\n            {\n                toShowPicker\n                && \n                <AvatarPicker \n                    toShowPicker = {toShowPicker}\n                    setToShowPicker = {setToShowPicker}\n                    setSelectedAvatar = {setSelectedAvatar} \n                    selectedAvatar ={selectedAvatar}\n                />\n            }\n\n            <section className = 'CommentsTextSection'>\n                <AvatarComponent \n                    toShowPicker = {toShowPicker}\n                    setToShowPicker = {setToShowPicker}\n                    selectedAvatar = {selectedAvatar} \n                    setSelectedAvatar= {setSelectedAvatar}\n                />\n                \n                <textarea \n                    placeholder = 'Write description and then press CTRL + Enter'\n                    ref = {containerRef}\n                    name = 'comment' \n                    title = 'To save, press: Ctrl + Enter'\n                    className = 'CommentsTextArea'\n                />\n            </section>\n        </>\n    );\n};\n\nexport default CommentsArea;","import React, {useState} from 'react';\n\n//styles:\nimport './Styles/MAIN.sass';\n\n//components:\nimport DairyAppTitle from './Components/DairyAppTitle/DairyAppTitle';\nimport Tasks from './Components/Tasks/Tasks';\nimport CustomHeader from './Components/GeneralComponents/CustomHeader'\nimport NewTaskForm from './Components/GeneralComponents/NewTaskForm';\nimport NewTaskInput from './Components/GeneralComponents/NewTaskInput';\nimport SaveTaskBtn from './Components/GeneralComponents/SaveTaskBtn';\nimport TaskItem from './Components/GeneralComponents/TaskItem';\nimport NumberedDot from './Components/GeneralComponents/NumberedDot';\nimport DeleteBtn from './Components/GeneralComponents/DeleteBtn'; \nimport Comments from './Components/Comments/Comments';\nimport CommentItem from './Components/GeneralComponents/CommentItem';\nimport CommentsArea from './Components/GeneralComponents/CommentsArea';\n\n//custom hooks:\nimport useLocalStorage from './Components/CustomHooks/useLocalStorage';\n\nconst App = () => {\n\tconst {getTasks} = useLocalStorage();\n\tconst [data, setData] = useState(getTasks());\t\n\tconst [selectedUuid, setSelectedUuid] = useState(false);\t\n\tconst [comments, setComments] = useState(false);\n\t\n\treturn(\n\t\t<section className = 'App'>\n\t\t\t<DairyAppTitle />\n\t\n\t\t\t<Tasks >\n\t\t\t\t<CustomHeader \n\t\t\t\t\tindex = {2}\n\t\t\t\t\tcontent = 'Items' \n\t\t\t\t\tClass = 'TaskTitle'\n\t\t\t\t/>\n\n\t\t\t\t<NewTaskForm setData = {setData}>\n\t\t\t\t\t<NewTaskInput />\n\t\t\t\t\t<SaveTaskBtn />\n\t\t\t\t</NewTaskForm>\n\n\t\t\t\t{data.map(\n\t\t\t\t\t(item) =>\n\t\t\t\t\t\t<TaskItem \n\t\t\t\t\t\t\tkey = {item.uuid} \n\t\t\t\t\t\t\tuuid = {item.uuid} \n\t\t\t\t\t\t\tsetComments = {setComments}\n\t\t\t\t\t\t\tsetSelectedUuid = {setSelectedUuid}\n\t\t\t\t\t\t\tselectedUuid = {selectedUuid}\n\t\t\t\t\t\t>\t\t\n\t\t\t\t\t\t\t<section className = 'TaskName'>{item.task}</section>\n\n\t\t\t\t\t\t\t<NumberedDot number = {item.descriptionCount}/>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<DeleteBtn uuid = {item.uuid} setData = {setData}/>\n\t\t\t\t\t\t</TaskItem>\n\t\t\t\t)}\n\t\t\t</Tasks>\n\n\t\t\t{comments && \n\t\t\t<Comments >\n\t\t\t\t<CustomHeader \n\t\t\t\t\tindex = {2}\n\t\t\t\t\tcontent = {`Comments #${comments.length}`} \n\t\t\t\t\tClass = 'CommentsTitle'\n\t\t\t\t/>\n\n\t\t\t\t<section className = 'CommentsContainer'>\n\t\t\t\t\t{comments.map(\n\t\t\t\t\t\t(item, i) => \n\t\t\t\t\t\t\t//Don't forget to pass avatar!!\n\t\t\t\t\t\t\t<CommentItem \n\t\t\t\t\t\t\t\tavatar = {item.avatar}\n\t\t\t\t\t\t\t\ttext = {item.text} key = {i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\n\t\t\t\t<CommentsArea \n\t\t\t\t\tuuid = {selectedUuid} \n\t\t\t\t\tsetComments = {setComments} \n\t\t\t\t\tsetData = {setData}\n\t\t\t\t/>\n\t\t\t</Comments>\n\t\t\t}\n\t\t</section>\n\t);\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}